{
	"name": "denormOrders",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable8",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CosmosDbSqlApiOrders",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Aggregate1"
				},
				{
					"name": "Join1"
				},
				{
					"name": "Select1"
				},
				{
					"name": "ConformDataTypes"
				}
			],
			"script": "source(output(\n\t\tSalesOrderID as integer,\n\t\tOrderDate as timestamp,\n\t\tStatus as integer,\n\t\tShipDate as timestamp,\n\t\tAccountNumber as string,\n\t\tShipMethod as string,\n\t\tSubTotal as decimal(19,4),\n\t\tOrderDetails as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT\\n  o.SalesOrderID,\\n  o.OrderDate,\\n  o.Status,\\n  o.ShipDate,\\n  o.AccountNumber,\\n  o.ShipMethod,\\n  o.SubTotal,\\n  (select SalesOrderDetailID, ProductId, UnitPrice, OrderQty from SalesLT.SalesOrderDetail od where od.SalesOrderID = o.SalesOrderID for json auto) as OrderDetails\\nFROM SalesLT.SalesOrderHeader o',\n\tformat: 'query') ~> source1\nsource1 aggregate(groupBy(SalesOrderID),\n\torderdetailsarray = collect(regexReplace(OrderDetails,`\\[|\\]|\\\"`,''))) ~> Aggregate1\nsource1, Aggregate1 join(source1@SalesOrderID == Aggregate1@SalesOrderID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nConformDataTypes select(mapColumn(\n\t\tSalesOrderID = source1@SalesOrderID,\n\t\tOrderDate,\n\t\tStatus,\n\t\tShipDate,\n\t\tAccountNumber,\n\t\tShipMethod,\n\t\tSubTotal,\n\t\tOrderDetails = orderdetailsarray\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\nJoin1 derive(SubTotal = round(toDouble(SubTotal),2),\n\t\tdetails = @(field=OrderDetails[1],\n\t\tfield1=)) ~> ConformDataTypes\nSelect1 sink(input(\n\t\torderID as string,\n\t\tcustomerID as string,\n\t\temployeeID as string,\n\t\torderDate as string,\n\t\trequiredDate as string,\n\t\tshippedDate as string,\n\t\tshipVia as string,\n\t\tfreight as double,\n\t\tshipName as string,\n\t\tshipAddress as (street as string, city as string, region as string, postalCode as string, country as string),\n\t\tdetails as (productID as string, unitPrice as string, quantity as string, discount as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'document',\n\tpartitionKey: ['/SalesOrderID'],\n\tthroughput: 1000,\n\tmapColumn(\n\t\tSalesOrderID,\n\t\tOrderDate,\n\t\tStatus,\n\t\tShipDate,\n\t\tAccountNumber,\n\t\tShipMethod,\n\t\tSubTotal,\n\t\tOrderDetails,\n\t\tid = SalesOrderID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
		}
	}
}