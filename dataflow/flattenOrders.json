{
	"name": "flattenOrders",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CosmosDbSqlApiOrders",
						"type": "DatasetReference"
					},
					"name": "cosmosDbSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sqlorders",
						"type": "DatasetReference"
					},
					"name": "AzureSQLDBSink"
				}
			],
			"transformations": [
				{
					"name": "FlattenArray"
				},
				{
					"name": "CalculateTotal"
				}
			],
			"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'document',\n\tthroughput: 5000) ~> cosmosDbSource\ncosmosDbSource foldDown(unroll(details),\n\tmapColumn(\n\t\torderID,\n\t\tcustomerID,\n\t\temployeeID,\n\t\torderDate,\n\t\trequiredDate,\n\t\tshippedDate,\n\t\tshipVia,\n\t\tfreight,\n\t\tshipName,\n\t\tshipAddress,\n\t\tdetails\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenArray\nFlattenArray derive(details = @(productID=details.productID,\n\t\tunitPrice=details.unitPrice,\n\t\tquantity=details.quantity,\n\t\tdiscount=details.discount,\n\t\ttotalAmount=toString(round(toInteger(details.quantity)*toInteger(details.unitPrice),2),'###.##'))) ~> CalculateTotal\nCalculateTotal sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tmapColumn(\n\t\torderDate,\n\t\trequiredDate,\n\t\tshippedDate,\n\t\tshipVia,\n\t\tfreight,\n\t\tshipName,\n\t\tcity = shipAddress.city,\n\t\tpostalCode = shipAddress.postalCode,\n\t\ttotalAmount = details.totalAmount\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> AzureSQLDBSink"
		}
	}
}