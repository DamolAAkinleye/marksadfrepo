{
	"name": "canonicalmodel",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MoviesD2",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "folderout",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "BuildModel"
				},
				{
					"name": "Aggregate1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "Filter1"
				}
			],
			"script": "parameters{\n\tyearfilter as integer (1989),\n\tgenrefilter as string ('Comedy')\n}\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\tRottenTomato as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1\nsource1 derive(MovieID = toInteger(byName('movie')),\n\t\tMovieTitle = byName('title'),\n\t\tMovieYearReleased = toInteger(byName('year')),\n\t\tMovieRating = toInteger(byName('Rating')),\n\t\tMovieGenres = split(toString(byName('genres')),'|')) ~> BuildModel\nFilter1 aggregate(groupBy(MovieYearReleased,\n\t\tMoviePrimaryGenre),\n\tAverageRating = round(avg(MovieRating),2)) ~> Aggregate1\nBuildModel derive(MoviePrimaryGenre = MovieGenres[1]) ~> DerivedColumn1\nDerivedColumn1 filter(MovieYearReleased == $yearfilter && MoviePrimaryGenre == $genrefilter) ~> Filter1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tmapColumn(\n\t\teach(patternMatch(`Movie`))\n\t)) ~> sink1"
		}
	}
}