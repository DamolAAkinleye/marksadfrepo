{
	"name": "fuzzyLookup",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MoviesD2",
						"type": "DatasetReference"
					},
					"name": "moviesCSV"
				},
				{
					"dataset": {
						"referenceName": "moviesoutnew_parquet2",
						"type": "DatasetReference"
					},
					"name": "moviesParquet"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "moviesout",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "PruneCols1"
				},
				{
					"name": "PruneCols2"
				},
				{
					"name": "Join1"
				},
				{
					"name": "FilterBadRows"
				}
			],
			"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> moviesCSV\nsource(output(\n\t\tProp_0 as string,\n\t\tProp_1 as string,\n\t\tProp_2 as string,\n\t\tProp_3 as string,\n\t\tProp_4 as string,\n\t\tProp_5 as string,\n\t\tProp_6 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet') ~> moviesParquet\nmoviesCSV select(mapColumn(\n\t\tmovie,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\tRating\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PruneCols1\nmoviesParquet select(mapColumn(\n\t\tTitle2 = Title,\n\t\tRottenTom,\n\t\tYear2 = Year\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> PruneCols2\nPruneCols1, PruneCols2 join(soundex(title) == soundex(Title2)\n\t&& toInteger(year) == Year2,\n\tjoinType:'left',\n\tbroadcast: 'none')~> Join1\nJoin1 filter((!isNull(Title2) && !isNull(title)) && toInteger(year) > 1900) ~> FilterBadRows\nFilterBadRows sink(input(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionBy('hash', 1)) ~> sink1"
		}
	}
}