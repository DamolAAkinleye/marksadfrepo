{
	"name": "denormOrders2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "orderdetails",
						"type": "DatasetReference"
					},
					"name": "SourceOrderDetails"
				},
				{
					"dataset": {
						"referenceName": "SalesHeader",
						"type": "DatasetReference"
					},
					"name": "SourceOrderHeader"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CosmosDbSqlApiOrders",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "ColumnScrubber"
				},
				{
					"name": "JoinIt"
				},
				{
					"name": "ValueScrubber"
				},
				{
					"name": "CreateArrays"
				},
				{
					"name": "MakeNewStruct"
				}
			],
			"script": "source(output(\n\t\tSalesOrderID as integer,\n\t\tSalesOrderDetailID as integer,\n\t\tOrderQty as integer,\n\t\tProductID as integer,\n\t\tUnitPrice as decimal(19,4),\n\t\tUnitPriceDiscount as decimal(19,4),\n\t\tLineTotal as decimal(38,6),\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceOrderDetails\nsource(output(\n\t\tSalesOrderID as integer,\n\t\tRevisionNumber as integer,\n\t\tOrderDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tShipDate as timestamp,\n\t\tStatus as integer,\n\t\tOnlineOrderFlag as boolean,\n\t\tSalesOrderNumber as string,\n\t\tPurchaseOrderNumber as string,\n\t\tAccountNumber as string,\n\t\tCustomerID as integer,\n\t\tShipToAddressID as integer,\n\t\tBillToAddressID as integer,\n\t\tShipMethod as string,\n\t\tCreditCardApprovalCode as string,\n\t\tSubTotal as decimal(19,4),\n\t\tTaxAmt as decimal(19,4),\n\t\tFreight as decimal(19,4),\n\t\tTotalDue as decimal(19,4),\n\t\tComment as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SourceOrderHeader\nJoinIt select(mapColumn(\n\t\tSalesOrderID = SourceOrderHeader@SalesOrderID,\n\t\tSalesOrderDetailID,\n\t\tOrderDate,\n\t\tShipDate,\n\t\tStatus,\n\t\tSalesOrderNumber,\n\t\tShipMethod,\n\t\tTotalDue,\n\t\tOrderQty,\n\t\tUnitPrice\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ColumnScrubber\nSourceOrderHeader, SourceOrderDetails join(SourceOrderHeader@SalesOrderID == SourceOrderDetails@SalesOrderID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinIt\nColumnScrubber derive(TotalDue = toDouble(round(TotalDue,2)),\n\t\tUnitPrice = toDouble(round(UnitPrice,2))\r\n\r\n) ~> ValueScrubber\nValueScrubber aggregate(groupBy(SalesOrderID),\n\tOrderQty1 = collect(OrderQty),\n\t\tUnitPrice1 = collect(UnitPrice),\n\t\teach(match(name != 'OrderQty' && name != 'UnitPrice' && name != 'SalesOrderID'), $$ = first($$))) ~> CreateArrays\nCreateArrays derive(details = @(OrderQty=OrderQty1,\n\t\tUnitPrice=UnitPrice1)) ~> MakeNewStruct\nMakeNewStruct sink(input(\n\t\torderID as string,\n\t\tcustomerID as string,\n\t\temployeeID as string,\n\t\torderDate as string,\n\t\trequiredDate as string,\n\t\tshippedDate as string,\n\t\tshipVia as string,\n\t\tfreight as double,\n\t\tshipName as string,\n\t\tshipAddress as (street as string, city as string, region as string, postalCode as string, country as string),\n\t\tdetails as (productID as string, unitPrice as string, quantity as string, discount as string)[]\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'document',\n\tpartitionKey: ['/SalesOrderID'],\n\tthroughput: 2000,\n\tmapColumn(\n\t\tSalesOrderID,\n\t\tOrderDate,\n\t\tShipDate,\n\t\tStatus,\n\t\tSalesOrderNumber,\n\t\tShipMethod,\n\t\tTotalDue,\n\t\tdetails\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
		}
	}
}