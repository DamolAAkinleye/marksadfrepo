{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"AzureBlobStorage1": {
			"type": "string"
		},
		"CosmosDb3": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Cosmos Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create Collection",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "moviesCsvToJSON-Cosmos",
								"type": "DataFlowReference"
							}
						}
					},
					{
						"name": "Delete Rows",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cosmosDelete",
								"type": "DataFlowReference"
							}
						}
					},
					{
						"name": "Upsert Rows",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cosmosUpdate",
								"type": "DataFlowReference"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/moviesCsvToJSON-Cosmos')]",
				"[concat(variables('factoryId'), '/dataflows/cosmosDelete')]",
				"[concat(variables('factoryId'), '/dataflows/cosmosUpdate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesCsvToJSON-Cosmos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesD2",
								"type": "DatasetReference"
							},
							"name": "moviesCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cosmosMovie",
								"type": "DatasetReference"
							},
							"name": "loadCosmos"
						}
					],
					"transformations": [
						{
							"name": "MakeHierarchy"
						},
						{
							"name": "Dedupe"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\tRating as integer,\n\t\t{Rotton Tomato} as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> moviesCSV\nmoviesCSV derive(movies = @(title=title,\n\t\tgenres=split(genres,'|'),\n\t\tyear=year,\n\t\trating=Rating)) ~> MakeHierarchy\nMakeHierarchy aggregate(groupBy(moviegrp = movie),\n\tid = first(movie),\n\t\tmovies = first(movies),\n\t\ttitlekey = first(title)) ~> Dedupe\nDedupe sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'document',\n\tpartitionKey: ['/titlekey'],\n\tthroughput: 2000,\n\tmapColumn(\n\t\tid,\n\t\tmovies,\n\t\ttitlekey\n\t)) ~> loadCosmos"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesD2')]",
				"[concat(variables('factoryId'), '/datasets/cosmosMovie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cosmosDelete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "cosmosMovie",
								"type": "DatasetReference"
							},
							"name": "moviesCosmos"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cosmosMovie",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DeletePolicy"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovies as (year as integer, genres as string[], rating as integer, title as string),\n\t\ttitlekey as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'document',\n\tsystemColumns: true,\n\tthroughput: 2000) ~> moviesCosmos\nmoviesCosmos alterRow(deleteIf(titlekey=='Social Network, The')) ~> DeletePolicy\nDeletePolicy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'document',\n\tpartitionKey: ['/titlekey'],\n\tthroughput: 2000,\n\tmapColumn(\n\t\tmovies,\n\t\ttitlekey,\n\t\tid\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/cosmosMovie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cosmosUpdate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "cosmosMovie",
								"type": "DatasetReference"
							},
							"name": "moviesCosmos"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "cosmosMovie",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MakeHierarchy"
						},
						{
							"name": "updatePolicy"
						}
					],
					"script": "\n\nsource(output(\n\t\tmovies as (genres as string[], rating as integer, title as string, year as integer),\n\t\ttitlekey as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tformat: 'document',\n\tsystemColumns: true,\n\tthroughput: 2000) ~> moviesCosmos\nmoviesCosmos derive(movies = @(year=movies.year,\n\t\tgenres=movies.genres,\n\t\trating=movies.rating*10,\n\t\ttitle=movies.title)) ~> MakeHierarchy\nMakeHierarchy alterRow(upsertIf(true())) ~> updatePolicy\nupdatePolicy sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tformat: 'document',\n\tpartitionKey: ['/titlekey'],\n\tthroughput: 2000,\n\tmapColumn(\n\t\ttitlekey,\n\t\tid,\n\t\tmovies\n\t)) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/cosmosMovie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesD2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureBlobStorage1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "moviesDB.csv",
						"folderPath": "SampleData",
						"container": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cosmosMovie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('CosmosDb3')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"typeProperties": {
					"collectionName": "moviesdemo"
				}
			},
			"dependsOn": []
		}
	]
}